<%- include("partials/header.ejs") %>

<div class="container">
  <!-- Image with rounded border -->
  <img src="/images/arthdal2.png" alt="Athrdal Chronicles seasons 1 and 2 image" class="rounded img-fluid kdramaPhotos" style="max-width: 100%;">

  <!-- Text under the image -->
    <h2 class="mt-3">Synposis</h2>
    <h6 class="mt-3 arth">Arthdal Chronicles - Season 1</h6>
    <p class="mt-3 synopDescrip">Set in the fictional land of Arthdal during ancient times, "Arthdal Chronicles - Season 1" follows
      the journey of a man named Eun Seom, who is also believed to be the reincarnation of a historical and godly figure called Aramun Haesulla...
      a being destined to bring disaster to Arthdal. Despite facing numerous hardships, Eun Seom returns to Arthdal as a grown man.
      Ta Gon, a war hero, dreams of becoming the first king of Arthdal after paving the way for its prosperity. Tan Ya, born with a fate
      similar to Eun Seom's, is the successor of the Wahan Tribe, driven by a mission to fulfill her destiny and aspiring to become a
      prominent figure in politics.
    </p>

    <h6 class="mt-3 arth">Arthdal Chronicles: The Sword of Aramun - Season 2</h6>
    <p class="mt-3 synopDescrip">"Arthdal Chronicles: The Sword of Aramun - Season 2" unfolds approximately a decade later, depicting
      the aftermath of the events in Arthdal. Over eight years, while Eun Seom achieves the reunification of 30 Ago tribes under his
      leadership, Ta Gon and Arthdal quells the rebellion of most tribes. As tensions escalate, Ta Gon's Kingdom of Arthdal and Eun Seom's
      Ago Union prepare for an inevitable war. Eun Seom now rules the East, while Tan Ya continues as the successor to the Wahan clan.
      The season delves into the power struggle eight years after Ta Gon's ascent to the throne.
    </p>

    <div class="metadata">
      <p class="mt-3"><span class="metadata-title">Directors:</span> Kim Won-seok <span style="font-style: italic;">(Season 1)</span> & Kim Kwang-shik <span style="font-style: italic;">(Season 2)</span></p>
      <p class="mt-3"><span class="metadata-title">Released:</span> June 1, 2019 | September 9, 2023</p>
      <p class="mt-3"><span class="metadata-title">Status:</span> Completed - <span style="font-style: italic;">Seasons 1 & 2</span></p>
      <p class="mt-3"><span class="metadata-title">Episodes:</span> 18 <span style="font-style: italic;">(Season 1)</span> | 12 <span style="font-style: italic;">(Season 2)</span></p>
      <p class="mt-3"><span class="metadata-title">Country / Language:</span> Korean</p>
      <p class="mt-3"><span class="metadata-title">Genres:</span> Ancient Fantasy, War, Warrior, Curse, Historical, Political, Romance</p>
    </div>

    <hr>

<!-- Form to create a post -->
<h4>Add Comment</h4>
<form id="commentForm" action="/drama2/posts" method="POST">
    <div class="mb-3">
    <textarea class="form-control" id="content" name="content" rows="3" required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Add Comment</button>
</form>

<hr>

<h4>Comments</h4>
<div class="comment-container">
  <% if (posts.length > 0) { %>
    <% posts.forEach((post, index) => { %>
      <div class="comment-box" id="comment<%= index %>">
        <div class="comment-content">
          <p><%= post %></p>
          <!-- Edit and Delete buttons -->
          <div class="comment-buttons">
            <!-- Edit button -->
            <button class="btn btn-primary edit-btn my-1" data-index="<%= index %>">Edit</button>
            <!-- Delete button -->
            <button class="btn btn-danger delete-btn my-1 mb-2" data-index="<%= index %>">Delete</button>
          </div>
        </div>
        <!-- Edit form (hidden by default) -->
        <form class="edit-form" style="display: none;">
          <div class="mb-3">
            <textarea class="form-control" rows="3" required><%= post %></textarea>
          </div>
          <!-- Cancel Edit button -->
          <button type="button" class="btn btn-secondary cancel-edit-btn">Cancel</button>
          <!-- Confirm Edit button -->
          <button type="button" class="btn btn-success confirm-edit-btn">Confirm Edit</button>
        </form>
      </div>
      <hr> 
    <% }); %>
  <% } else { %>
    <div class="no-comment-box">
      <p>No comments yet.</p>
    </div>
  <% } %>
</div>

<script>
  // Event listener for entire document
  document.addEventListener("DOMContentLoaded", function() {
    // Edit buttons event listener
    const editButtons = document.querySelectorAll(".edit-btn");
    editButtons.forEach(button => {
      button.addEventListener("click", function() {
        const index = this.getAttribute("data-index");
        const commentBox = document.getElementById(`comment${index}`);
        const editForm = commentBox.querySelector(".edit-form");
        const originalContent = commentBox.querySelector("p").textContent;
        const textarea = editForm.querySelector("textarea");
        textarea.value = originalContent;
        commentBox.querySelector("p").style.display = "none";
        // Hide edit & delete buttons
        commentBox.querySelector(".comment-buttons").style.display = "none"; 
        editForm.style.display = "block";
      });
    });
    
    // Confirm Edit buttons event listener
    const confirmEditButtons = document.querySelectorAll(".confirm-edit-btn");
    confirmEditButtons.forEach(button => {
      button.addEventListener("click", function() {
        const commentBox = this.parentElement.parentElement;
        const index = commentBox.getAttribute("id").replace("comment", "");
        console.log("Index:", index); // Log index for debugging
        const updatedContent = commentBox.querySelector("textarea").value;
        console.log("Updated Content:", updatedContent); // Log updatedContent for debugging
        // Send an AJAX request to update the content
        fetch(`/edit/drama2/${index}`, { // Updated URL
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ content: updatedContent })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error("Failed to update comment.");
          }
          return response.json();
        })
        .then(data => {
          console.log("Response Data:", data); // Log response data for debugging
          // Update the displayed content if successful
          commentBox.querySelector("p").textContent = updatedContent;
          commentBox.querySelector("p").style.display = "block";
          // Show edit & delete buttons
          commentBox.querySelector(".comment-buttons").style.display = "block";
          commentBox.querySelector(".edit-form").style.display = "none";
        })
        .catch(error => {
          console.error("Error:", error);
          alert("Failed to update comment.");
        });
      });
    });

    // Cancel Edit buttons event listener
    const cancelEditButtons = document.querySelectorAll(".cancel-edit-btn");
    cancelEditButtons.forEach(button => {
      button.addEventListener("click", function() {
        const commentBox = this.parentElement.parentElement;
        commentBox.querySelector("p").style.display = "block";
        commentBox.querySelector(".comment-buttons").style.display = "block"; // Show edit and delete buttons
        commentBox.querySelector(".edit-form").style.display = "none";
      });
    });

    // Delete buttons event listener
    const deleteButtons = document.querySelectorAll(".delete-btn");
    deleteButtons.forEach(button => {
      button.addEventListener("click", function() {
        const index = this.getAttribute("data-index");
        // Send an AJAX request to delete the comment
        fetch(`/delete/drama2/${index}`, { // Updated URL
          method: "DELETE",
          headers: {
            "Content-Type": "application/json"
          }
        })
        .then(response => {
      if (!response.ok) {
        throw new Error("Failed to delete comment.");
      }
      return response.json();
    })
        .then(data => {
          console.log("Response Data:", data); // Log response data for debugging

          // Remove the comment box from the DOM
          const commentBox = document.getElementById(`comment${index}`);
          const hrElement = commentBox.nextElementSibling; // Get the <hr> element following the comment
          commentBox.remove(); // Remove the comment box from the DOM

          // Remove the <hr> element if it exists
          if (hrElement && hrElement.tagName === "HR") {
            hrElement.remove();
          }
          // Update indexes for remaining comments
          const remainingComments = document.querySelectorAll(".comment-box");
          remainingComments.forEach((comment, i) => {
            const currentIndex = comment.getAttribute("id").replace("comment", "");
            if (parseInt(currentIndex) > parseInt(index)) {
              comment.setAttribute("id", `comment${i}`);
              comment.querySelector(".edit-btn").setAttribute("data-index", i);
              comment.querySelector(".delete-btn").setAttribute("data-index", i);
            }
          });

          console.log("Comment deleted."); // Log message
        })
        .catch(error => {
          console.error("Error:", error);
          alert("Failed to delete comment.");
        });
      });
    });
  });
</script>

<%- include("partials/footer.ejs") %>
